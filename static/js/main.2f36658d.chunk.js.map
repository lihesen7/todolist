{"version":3,"sources":["models/Storage.js","views/index.js","App.js","serviceWorker.js","index.js"],"names":["app","set","key","value","localStorage","setItem","JSON","stringify","get","parse","getItem","delete","removeItem","index","props","handelAdd","state","Doing","push","name","isCheck","doing","setState","storage","Done","todolist","sublist","this","e","target","done","splice","console","log","className","placeholder","allowClear","onChange","getValue","bind","onPressEnter","length","itemLayout","dataSource","renderItem","item","Item","actions","style","color","fontSize","onClick","handelGoDone","type","DeleDoing","Meta","avatar","checked","description","size","getChangeValue","val","handelGoDoing","DeleDone","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f36658d.chunk.js","sourcesContent":["var app ={\r\n    set(key,value){\r\n        localStorage.setItem(key,JSON.stringify(value));\r\n    },\r\n    get(key){\r\n        return JSON.parse(localStorage.getItem(key));\r\n    },\r\n    delete(key){\r\n        localStorage.removeItem(key);\r\n    }\r\n}\r\nexport  default app;","import React, { Component } from 'react';\r\nimport './index.css'\r\nimport storage from '../models/Storage';\r\nimport { Input,Icon} from 'antd';\r\nimport { Checkbox } from 'antd';\r\nimport { List} from 'antd';\r\n\r\nclass index extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            value:'',\r\n            Doing:[],\r\n            Done:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        //设置数据持久化\r\n        let todolist = storage.get(\"Todolist\");\r\n        let sublist = storage.get(\"Sublist\");\r\n        if(todolist){\r\n            this.setState({\r\n                Doing:todolist    \r\n            })\r\n        };\r\n        if(sublist){\r\n            this.setState({\r\n                Done:sublist\r\n            })\r\n        };\r\n    }\r\n    getValue(e){\r\n        this.setState({\r\n            value:e.target.value\r\n        })\r\n    }\r\n\r\n    //添加待办事项\r\n    handelAdd=()=>{\r\n        if( this.state.value!==''){\r\n            this.state.Doing.push({name:this.state.value,isCheck:false})\r\n            let doing =this.state.Doing\r\n            this.setState({\r\n                Doing:doing,\r\n                value:''\r\n            })\r\n            storage.set(\"Todolist\",doing)\r\n        }\r\n    }\r\n\r\n    //编辑代办事项\r\n    getChangeValue(index,e){\r\n        let name = e.target.value;\r\n        let doing = this.state.Doing;\r\n        doing[index].name = name;\r\n        this.setState({\r\n            Doing:doing\r\n        })\r\n    }\r\n\r\n    // 待办事项添加到完成事项\r\n    handelGoDone(index){\r\n        this.state.Done.push({name:this.state.Doing[index].name,isCheck:true});\r\n        let done = this.state.Done;\r\n        let doing = this.state.Doing;\r\n        doing.splice(index,1);\r\n        this.setState({\r\n            Doing:doing,\r\n            Done:done\r\n        })\r\n        console.log(this.state)\r\n        storage.set(\"Todolist\",doing);\r\n        storage.set(\"Sublist\",done);\r\n    }\r\n\r\n    //删除待办事项\r\n    DeleDoing(index){\r\n        this.state.Doing.splice(index,1);\r\n        let doing = this.state.Doing;\r\n        this.setState({\r\n            Doing:doing\r\n        })\r\n        storage.set(\"Todolist\",doing);\r\n    }\r\n\r\n    //已完成事项回退成待办事项\r\n    handelGoDoing(index){\r\n        this.state.Doing.push({name:this.state.Done[index].name,isCheck:false});\r\n        let doing = this.state.Doing;\r\n        this.state.Done.splice(index,1);\r\n        let done = this.state.Done;\r\n        this.setState({\r\n            Doing:doing,\r\n            Done:done\r\n        })\r\n        storage.set(\"Todolist\",doing);\r\n        storage.set(\"Sublist\",done);\r\n    }\r\n\r\n    //删除已完成事项\r\n    DeleDone(index){\r\n        this.state.Done.splice(index,1);\r\n        let done = this.state.Done;\r\n        this.setState({\r\n            Done:done\r\n        })\r\n        storage.set(\"Sublist\",done);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <Input placeholder=\"请输入Todo\" allowClear={true} onChange={this.getValue.bind(this)} onPressEnter={this.handelAdd} />\r\n                <div className=\"doing\">\r\n                    <h2>待办事项 {this.state.Doing.length} </h2>\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={this.state.Doing}\r\n                        renderItem={(item,index) => (\r\n                        <List.Item \r\n                            actions={[\r\n                                <Icon style={{color:'#008DFF',fontSize:'22px'}} onClick={this.handelGoDone.bind(this,index)} type=\"plus-circle\" />\r\n                                ,\r\n                                <Icon style={{color:'#FF4D4F',fontSize:'22px'}} onClick={this.DeleDoing.bind(this,index)} type=\"close-circle\" />\r\n                            ]}\r\n                        >\r\n                            <List.Item.Meta\r\n                                avatar={<Checkbox checked={item.isCheck} />}\r\n                                description={<Input allowClear={true} size=\"small\" onChange={this.getChangeValue.bind(this,index)} value={item.name} /> }\r\n                            />\r\n                        </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"done\">\r\n                    <h2>已完成事项 {this.state.Done.length} </h2>\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={this.state.Done}\r\n                        renderItem={(val,index) => (\r\n                        <List.Item \r\n                            actions={[\r\n                                <Icon style={{color:'#008DFF',fontSize:'22px'}} onClick={this.handelGoDoing.bind(this,index)} type=\"vertical-align-top\" />\r\n                                ,\r\n                                <Icon style={{color:'#FF4D4F',fontSize:'22px'}} onClick={this.DeleDone.bind(this,index)} type=\"close-circle\" />\r\n                            ]}\r\n                        >\r\n                            <List.Item.Meta\r\n                                avatar={<Checkbox checked={val.isCheck} />}\r\n                                description={val.name}\r\n                            />\r\n                        </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default index;","import React from 'react';\nimport Item from './views/index'\nimport './App.css'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"head\">\n        <h1>lihesen7的Todolist</h1>\n      </div>\n      <Item></Item>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}